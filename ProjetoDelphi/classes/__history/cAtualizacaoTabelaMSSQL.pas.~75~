unit cAtualizacaoTabelaMSSQL;

interface

uses System.Classes,
     Vcl.Controls,
     Vcl.ExtCtrls,
     Vcl.Dialogs,
     ZAbstractConnection,
     ZConnection,
     ZAbstractRODataset,
     ZAbstractDataset,
     ZDataset,
     Data.DB,
     System.SysUtils,
     cAtualizacaoBancoDeDados,
     cCadUsuario;

type
  TAtualizacaoTabelaMSSQL = class(TAtualizaBancoDados)

  private
    function TabelaExiste(aNomeTabela:String):Boolean;
    procedure Categoria;
    procedure Cliente;
    procedure Produto;
    procedure Venda;
    procedure VendasItens;
    procedure Usuario;
    procedure AcaoAcesso;
    procedure UsuariosAcaoAcesso;
    procedure statusClientes;
    procedure pessoa;

  protected

  public
    constructor Create(aConexao:TZConnection);
    destructor Destroy; override;
end;

implementation

{ TAtualizacaoTabelaMSSQL }

constructor TAtualizacaoTabelaMSSQL.Create(aConexao: TZConnection);
begin
  ConexaoDB:=aConexao;
  Categoria;
  Cliente;
  Produto;            //CRIADAS EM SEQUÊNCIA RESPEITANDO HERANÇA
  Venda;
  VendasItens;
  Usuario;
  AcaoAcesso;
  UsuariosAcaoAcesso;
  statusClientes;
  pessoa;
end;

destructor TAtualizacaoTabelaMSSQL.Destroy;
begin

  inherited;
end;

function TAtualizacaoTabelaMSSQL.TabelaExiste(aNomeTabela: String): Boolean;
var qry:TZQuery;
begin
  try
    result:=false;
    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    qry.SQL.Clear;
    qry.SQL.Add(' SELECT OBJECT_ID (:NomeTabela) As ID ');
    qry.ParamByName('NomeTabela').AsString:=aNomeTabela;
    qry.Open;

    if qry.FieldByName('ID').AsInteger>0 then
      result:=true;

  finally
    qry.Close;
    if Assigned(qry) then
      FreeAndNil(qry);
  end;
end;

procedure TAtualizacaoTabelaMSSQL.AcaoAcesso;
begin
  if not TabelaExiste('acaoAcesso') then begin
    ExecutaDiretoBancoDeDados(
      'CREATE TABLE acaoAcesso ( '+
      '  acaoAcessoId int identity(1,1) not null, '+
      '  descricao varchar(100) not null, '+
      '  chave varchar(60) not null, '+
      '  PRIMARY KEY (acaoAcessoId) '+
      ' ) '
    );
  end;
end;

procedure TAtualizacaoTabelaMSSQL.Categoria;
begin
  if not TabelaExiste('categorias') then
    begin
      ExecutaDiretoBancoDeDados(
          ' CREATE TABLE categorias( '+
             ' categoriaId int IDENTITY(1,1) NOT NULL, '+
             ' descricao  varchar(30) NULL, '+
             ' PRIMARY KEY (categoriaId) ');
    end;
end;

procedure TAtualizacaoTableMSSQL.SubCategoria;
begin
  if not TabelaExiste('subCategoria') then
  begin
    ExecutaDiretoBancoDeDados(
                               'CREATE TABLE subCategoria(                                        '+
                               ' subCatId int identity(1,1) not null,                             '+
                               ' descrSubCat varchar(60) NULL,                                    '+
                               ' categoriaId int not null,                                        '+
                               ' PRIMARY KEY (subCatId, categoriaId),                             '+
                               ' CONSTRAINT FK_Categoria_SubCategoria                             '+
                               ' FOREIGN KEY (categoriaId) REFERENCES categorias(categoriaId),    '+
                               ' )'
                              );
  end;
end;

procedure TAtualizacaoTabelaMSSQL.statusClientes;
begin
if not TabelaExiste('statusClientes') then
    begin
      ExecutaDiretoBancoDeDados(
          ' CREATE TABLE statusClientes( '+
				  '   statusId int IDENTITY(1,1) NOT NULL, '+
				  '   descricao  varchar(30), '+
			    ' PRIMARY KEY (statusId))');
    end;
end;

procedure TAtualizacaoTabelaMSSQL.pessoa;
begin
if not TabelaExiste('pessoa') then
    begin
      ExecutaDiretoBancoDeDados(
          ' CREATE TABLE pessoa( '+
				  '   pessoaId int IDENTITY(1,1) NOT NULL, '+
				  '   descricao  varchar(30), '+
			    ' PRIMARY KEY (pessoaId))');
    end;
end;

procedure TAtualizacaoTabelaMSSQL.Cliente;
begin
  if not TabelaExiste('clientes') then
    begin
      ExecutaDiretoBancoDeDados (
        ' CREATE TABLE clientes( '+
        ' clienteId int IDENTITY(1,1) NOT NULL, '+
        ' nome varchar(60) NULL, '+
        ' endereco varchar(60) null, '+
        ' cpfCnpj varchar(30) null, '+
        ' cidade varchar(50) null, '+
        ' bairro varchar(40) null, '+
        ' cep varchar(10) null, '+
        ' telefone varchar(15) null, '+
        ' email varchar(100) null, '+
        ' dataNascimento datetime null, '+
        ' statusId int null, '+
        ' pessoaId int null, '+
        ' PRIMARY KEY (clienteId), '+
        ' CONSTRAINT FK_statusClientes FOREIGN KEY (statusId) REFERENCES statusClientes(statusId), '+
        ' CONSTRAINT FK_pessoaTipo FOREIGN KEY (pessoaId) REFERENCES pessoa(pessoaId)) ');
    end;
end;

procedure TAtualizacaoTabelaMSSQL.Produto;
begin
  if not TabelaExiste('produtos') then
    begin
      ExecutaDiretoBancoDeDados(
      '  CREATE TABLE produtos ( produtoId int IDENTITY(1,1) NOT NULL, '+
      '  nome varchar(60) NULL, '+
      '  descricao varchar(255) null, '+
      '  valor decimal(18,5) default 0.00000 null, '+
      '  quantidade decimal(18,5) default 0.00000 null, '+
      '  foto VarBinary(MAX) null, '+
      '  categoriaId int null, '+
      '  PRIMARY KEY (produtoId), '+
      '  CONSTRAINT FK_ProdutosCategorias FOREIGN KEY (categoriaId) references categorias(categoriaId)) '
    );
    end;
end;

procedure TAtualizacaoTabelaMSSQL.Venda;
begin
  if not TabelaExiste('vendas') then
    begin
    ExecutaDiretoBancoDeDados(
      ' Create table vendas (  '+
      ' vendaId int identity(1,1) not null,  '+
      ' clienteId int not null,  '+
      ' dataVenda datetime default getdate(),  '+
      ' totalVenda decimal(18,5) default 0.00000,  '+
      ' PRIMARY KEY (vendaId),  '+
      ' CONSTRAINT FK_VendasClientes FOREIGN KEY (clienteId) REFERENCES clientes(clienteId))  '
    );
    end;
end;

procedure TAtualizacaoTabelaMSSQL.VendasItens;
begin
  if not TabelaExiste('vendasItens') then
    begin
    ExecutaDiretoBancoDeDados(
      ' Create table vendasItens ( '+
      ' vendaId int not null, '+
      ' produtoId int not null, '+
      ' valorUnitario decimal (18,5) default 0.00000, '+
      ' quantidade decimal (18,5) default 0.00000, '+
      ' totalProduto decimal (18,5) default 0.00000, '+
      ' PRIMARY KEY (vendaId,produtoId), '+
      ' CONSTRAINT FK_VendasItensProdutos FOREIGN KEY (produtoId) REFERENCES produtos(produtoId)) '
    );
    end;
end;

procedure TAtualizacaoTabelaMSSQL.Usuario;
var oUsuario:TUsuario;
begin
  if not TabelaExiste('usuarios') then
    begin
    ExecutaDiretoBancoDeDados(
      ' Create table usuarios (  '+
      ' usuarioId int identity(1,1) not null,  '+
      ' nome varchar(50) not null, '+
      ' senha varchar(40) not null, '+
      ' PRIMARY KEY (usuarioId)) '
    );
    end;

    try
      oUsuario:=TUsuario.Create(ConexaoDB);
      oUsuario.nome:='ADMIN';
      oUsuario.senha:='mudar@123';
      if not oUsuario.UsuarioExiste(oUsuario.nome) then
        oUsuario.Inserir;
    finally
      if Assigned(oUsuario) then
        FreeAndNil(oUsuario);
    end;
end;

procedure TAtualizacaoTabelaMSSQL.UsuariosAcaoAcesso;
begin
  if not TabelaExiste('usuariosAcaoAcesso') then
  begin
    ExecutaDiretoBancoDeDados(
      'CREATE TABLE usuariosAcaoAcesso( '+
      ' usuarioId int NOT NULL, '+
      ' acaoAcessoId int NOT NULL, '+
      ' ativo bit not null default 1, '+
      ' PRIMARY KEY (usuarioId, acaoAcessoId), '+
      ' CONSTRAINT FK_UsuarioAcaoAcessoUsuario '+
      ' FOREIGN KEY (usuarioId) references usuarios(usuarioId), '+
      ' CONSTRAINT FK_UsuarioAcaoAcessoAcaoAcesso '+
      ' FOREIGN KEY (acaoAcessoId) references acaoAcesso(acaoAcessoId), '+
      ' ) '
  );
  end;
end;

end.
