unit cProVendas;

interface

{$region 'Interface'}
uses System.classes,
     //lista de Units
     Vcl.Controls,
     Vcl.ExtCtrls,
     Vcl.Dialogs,

     //conectando o banco
     ZAbstractConnection,
     ZConnection,

     //conectando a Query
     ZAbstractRODataset,
     ZAbstractDataset,
     ZDataset,

     //clientDataSet
     Data.DB,
     Datasnap.DBClient,

     //FreeAndNil
     System.SysUtils,

     cControleEstoque,
     uEnum;

Type TVenda = class
  private
    ConexaoDB:TZConnection;
    F_vendaId:Integer;
    F_clienteId:Integer;
    F_dataVenda:TDateTime;
    F_totalVenda:Double;
    function InserirItens(cds: TClientDataSet; IdVenda: Integer): Boolean;
    function ApagaItens(cds: TClientDataSet): Boolean;
    function InNot(cds: TClientDataSet): String;
    function EsteItemExiste(vendaId, produtoId: Integer): Boolean;
    function AtualizarItem(cds: TClientDataSet): Boolean;
    procedure RetornarEstoque(sCodigo: String; Acao: TAcaoExcluirEstoque);
    procedure BaixarEstoque(produtoId: Integer; Quantidade: Double);

  public
    constructor Create(aConexao:TZConnection);
    destructor Destroy; override;
    function Inserir(cds:TClientDataSet):Integer;
    function Atualizar(cds:TClientDataSet):Boolean;
    function Apagar:Boolean;
    function Selecionar(id:Integer; var cds:TClientDataSet):Boolean;

  published
    property VendaId        :Integer        read F_vendaId       write F_vendaId;
    property ClienteId      :Integer        read F_clienteId     write F_clienteId;
    property DataVenda      :TDateTime      read F_dataVenda     write F_dataVenda;
    property TotalVenda     :Double         read F_totalVenda    write F_totalVenda;
end;

{$endregion}

implementation

{$region 'Constructor and Destructor'}
constructor TVenda.Create(aConexao:TZConnection);
begin
   ConexaoDB := aConexao;
end;

destructor TVenda.Destroy;
begin
  inherited;
end;
{$endregion}

{$region 'CRUD'}
//método deletar (delete)
function TVenda.Apagar: Boolean;
var qry:TZQuery;
begin
  if MessageDlg('Apagar o Registro: '+#13+#13+
                 'Venda Nro: '+IntToStr(VendaId),mtConfirmation,[mbYes,mbNo],0)=mrNo then begin
    Result:=False;
    abort;
  end;

  try
    Result:=true;
    ConexaoDB.StartTransaction;
    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    //Apaga os Itens Primeiro
    qry.SQl.Clear;
    qry.SQL.Add('DELETE FROM vendasItens WHERE vendaId=:vendaId');
    qry.ParamByName('vendaId').AsInteger :=VendaId;

    try
      qry.ExecSQL;
      //Apaga a Tabela Master
      qry.SQL.Clear;
      qry.SQL.Add('DELETE FROM vendas WHERE vendaId=:vendaId');
      qry.ParamByName('vendaId').AsInteger :=VendaId;
      qry.ExecSQL;
      ConexaoDB.Commit;
    except
      ConexaoDB.Rollback;
      Result:=false;
    end;

  finally
    if Assigned(qry) then
      FreeAndNil(qry);
  end;
end;

//método atualizar (update)
function TVenda.Atualizar(cds:TClientDataSet): Boolean;
var qry:TZQuery;
begin
  try
    Result:=true;
    ConexaoDB.StartTransaction;
    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    qry.SQl.Clear;
    qry.SQL.Add('UPDATE vendas SET clienteId=:clienteId, dataVenda=:dataVenda, totalVenda=:totalVenda WHERE vendaId=:vendaId');

    qry.ParamByName('vendaId').AsInteger      := Self.F_vendaId;
    qry.ParamByName('clienteId').AsInteger    := Self.F_clienteId;
    qry.ParamByName('dataVenda').AsDateTime    := Self.F_dataVenda;
    qry.ParamByName('totalVenda').AsFloat      := Self.F_totalVenda;

    try
      //Update Vendas
      qry.ExecSQL;

      //Apagar itens no banco de dados que foram apagados na tela
      ApagaItens(cds);

      cds.First;
      while not cds.Eof do begin
        if EsteItemExiste(Self.F_vendaId, cds.FieldByName('produtoId').AsInteger) then begin
          AtualizarItem(cds);
        end
        else begin
          InserirItens(cds, Self.F_vendaId);
        end;

        cds.Next;
      end;

    Except
      Result:=False;
      ConexaoDB.Rollback;
    end;

    ConexaoDB.Commit;
  finally
    if Assigned(qry) then
      FreeAndNil(qry);
  end;
end;


function TVenda.AtualizarItem(cds:TClientDataSet): Boolean;
var qry:TZQuery;
begin
  try
    result:=true;
    RetornarEstoque(cds.FieldByName('produtoId').AsString, aeeAlterar);
    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    qry.SQL.Clear;
    qry.SQL.Add('UPDATE VendasItens '+
                '   SET ValorUnitario=:ValorUnitario '+
                '      ,Quantidade=:Quantidade '+
                '      ,TotalProduto=:TotalProduto '+
                ' WHERE vendaId=:vendaId AND produtoId=:produtoId ');
    qry.ParamByName('vendaId').AsInteger      :=Self.F_vendaId;
    qry.ParamByName('produtoId').AsInteger    :=cds.FieldByName('produtoId').AsInteger;
    qry.ParamByName('ValorUnitario').AsFloat  :=cds.FieldByName('valorUnitario').AsFloat;
    qry.ParamByName('Quantidade').AsFloat     :=cds.FieldByName('quantidade').AsFloat;
    qry.ParamByName('TotalProduto').AsFloat   :=cds.FieldByName('valorTotalProduto').AsFloat;

    try
      qry.ExecSQL;
      BaixarEstoque(cds.FieldByName('produtoId').AsInteger, cds.FieldByName('quantidade').AsFloat);
    except
      result:=false;
    end;

  finally
    if Assigned(qry) then
      FreeAndNil(qry);
  end;
end;

function TVenda.ApagaItens(cds:TClientDataSet): Boolean;
var qry:TZQuery;
    sCodNoCds:String;
begin
  try
    Result:=true;

    //Pega os codigos que estão no Client para Selecionar o In Not no Banco de Dados
    sCodNoCds:= InNot(cds);
    //Retorna ao estoque
    RetornarEstoque(sCodNoCds, aeeApagar);

    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    qry.SQL.Clear;
    qry.SQL.Add(' DELETE '+
                ' FROM VendasItens '+
                ' WHERE VendaId=:VendaId '+
                ' AND produtoId NOT IN ('+sCodNoCds+') ');
    qry.ParamByName('vendaId').AsInteger    :=Self.F_vendaId;

    try
      qry.ExecSQL;
    except
      Result:=false;
    end;

  finally
    if Assigned(qry) then
      FreeAndNil(qry);
  end;
end;

function TVenda.InNot(cds:TClientDataSet):String;
var sInNot:String;
begin
  sInNot:=EmptyStr;
  cds.First;
  while not cds.Eof do begin
    if sInNot=EmptyStr then
      sInNot := cds.FieldByName('produtoId').AsString
    else
      sInNot := sInNot +','+cds.FieldByName('produtoId').AsString;

    cds.Next;
  end;
  Result:=sInNot;
end;

function TVenda.EsteItemExiste(vendaId: Integer; produtoId: Integer): Boolean;
var qry:TZQuery;
begin
  try
    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    qry.SQL.Clear;
    qry.SQL.Add('SELECT Count (vendaId) AS Qtde '+
                ' FROM VendasItens '+
                ' WHERE vendaId=:vendaId and produtoId=:produtoId ');
    qry.ParamByName('vendaId').AsInteger    :=vendaId;
    qry.ParamByName('produtoId').AsInteger  :=produtoId;
    try
      qry.Open;

      if qry.FieldByName('Qtde').AsInteger>0 then
        result:=true
      else
        result:=false;

    except
      result:=false;
    end;

  finally
    if Assigned(qry) then
      FreeAndNil(qry);
  end;

end;

//método inserir (insert)
function TVenda.Inserir(cds:TClientDataSet): Integer;
var qry:TZQuery;
    IdVendaGerado:Integer;
begin
  try
    ConexaoDB.StartTransaction;
    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    //Faz a Inclusão no Banco de Dados
    qry.SQl.Clear;
    qry.SQL.Add('INSERT INTO vendas (clienteId, dataVenda, totalVenda) VALUES (:clienteId, :dataVenda, :totalVenda)');

    qry.ParamByName('clienteId').AsInteger         := Self.F_clienteId;
    qry.ParamByName('dataVenda').AsDateTime        := Self.F_dataVenda;
    qry.ParamByName('totalVenda').AsFloat          := Self.F_totalVenda;

    try
      qry.ExecSQL;
      //Recupera o ID Gerado no Insert
      qry.SQL.Clear;
      qry.SQL.Add('SELECT SCOPE_IDENTITY() AS ID');
      qry.Open;

      //Id da Tabela Master
      IdVendaGerado:=qry.FieldByName('ID').AsInteger;

      {$region 'Gravar na Tabela VendaItens'}
      cds.First;
      while not cds.Eof do begin
        InserirItens(cds, IdVendaGerado);
        cds.Next;
      end;
      {endregion}

      ConexaoDB.Commit;
      Result:=IdVendaGerado;
    Except
      ConexaoDB.Rollback;
      Result:=-1;
    end;

  finally
    if Assigned(qry) then
      FreeAndNil(qry);
  end;
end;

//método inserir itens na venda
function TVenda.InserirItens(cds:TClientDataSet; IdVenda:Integer):Boolean;
var qry:TZQuery;
begin
  try
    Result:=True;
    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    qry.SQl.Clear;
    qry.SQL.Add('INSERT INTO VendasItens (VendaID, ProdutoID, ValorUnitario, Quantidade, TotalProduto) VALUES (:VendaID, :ProdutoID, :ValorUnitario, :Quantidade, :TotalProduto)');

    qry.ParamByName('VendaID').AsInteger         := IdVenda;
    qry.ParamByName('ProdutoID').AsInteger       := cds.FieldByName('produtoId').AsInteger;
    qry.ParamByName('ValorUnitario').AsFloat     := cds.FieldByName('valorUnitario').AsFloat;
    qry.ParamByName('Quantidade').AsFloat        := cds.FieldByName('quantidade').AsFloat;
    qry.ParamByName('TotalProduto').AsFloat      := cds.FieldByName('valorTotalProduto').AsFloat;

    try
      qry.ExecSQL;
      BaixarEstoque(cds.FieldByName('produtoId').AsInteger, cds.FieldByName('quantidade').AsFloat);
    except
      Result:=false;
    end;

  finally
    if Assigned(qry) then
      FreeAndNil(qry);;
  end;
end;

//método selecionar (select)
function TVenda.Selecionar(id:Integer; var cds:TClientDataSet):Boolean;
var qry:TZQuery;
begin
  try
    Result:=true;
    qry:=TZQuery.Create(nil);
    qry.Connection:=ConexaoDB;
    qry.SQl.Clear;
    qry.SQL.Add('SELECT vendaId, clienteId, dataVenda, totalVenda FROM vendas WHERE vendaId=:vendaId');
    qry.ParamByName('vendaId').AsInteger:=id;

    try
      qry.Open;

      Self.F_vendaId     := qry.FieldByName('vendaId').AsInteger;
      Self.F_clienteId   := qry.FieldByName('clienteId').AsInteger;
      Self.F_dataVenda   := qry.FieldByName('dataVenda').AsDateTime;
      Self.F_totalVenda  := qry.FieldByName('totalVenda').AsFloat;

      {$region 'Selecionar na Tabela VendasItens'}
      //Apaga o ClienteDataSet Caso esteja com Registro
      cds.First;
      while not cds.Eof do begin
        cds.Delete;
      end;

      //Seleciona os Itens do Banco de Dados com a propriedade F_VendaId
      qry.Close;
      qry.SQL.Clear;
      qry.SQL.Add('SELECT VendasItens.ProdutoID, Produtos.Nome, VendasItens.ValorUnitario, VendasItens.Quantidade, VendasItens.TotalProduto FROM VendasItens INNER JOIN produtos ON Produtos.produtoId = VendasItens.produtoId WHERE VendasItens.VendaID=:VendaID');
      qry.ParamByName('VendaID').AsInteger:=Self.F_vendaId;
      qry.Open;

      qry.First;
      while not qry.Eof do begin
        cds.Append;
        cds.FieldByName('produtoId').AsInteger       := qry.FieldByName('ProdutoID').AsInteger;
        cds.FieldByName('nomeProduto').AsString      := qry.FieldByName('Nome').AsString;
        cds.FieldByName('valorUnitario').AsFloat     := qry.FieldByName('ValorUnitario').AsFloat;
        cds.FieldByName('quantidade').AsFloat        := qry.FieldByName('Quantidade').AsFloat;
        cds.FieldByName('valorTotalProduto').AsFloat := qry.FieldByName('TotalProduto').AsFloat;
        cds.Post;
        qry.Next;
      end;
      cds.First;

    Except
      Result:=False;
    end;

  finally
    if Assigned(qry) then
      FreeAndNil(qry);
  end;
end;
{$endregion}

{$region 'Controle de Estoque'}
//Utilizar no UPDATE e DELETE
procedure TVenda.RetornarEstoque(sCodigo:String; Acao:TAcaoExcluirEstoque);
var qry:TZQuery;
    oControleEstoque:TControleEstoque;
begin
  qry:=TZQuery.Create(nil);
  qry.Connection:=ConexaoDB;
  qry.SQL.Clear;
  qry.SQL.Add('SELECT produtoId, quantidade '+
              '  FROM VendasItens '+
              ' WHERE VendaId=:vendaId ');
  if Acao=aeeApagar then
    qry.SQL.Add(' AND produtoId NOT IN ('+sCodigo+') ')
  else
    qry.SQL.Add(' AND produtoId = ('+sCodigo+') ');

  qry.ParamByName('vendaId').AsInteger    :=Self.F_vendaId;
  try
    oControleEstoque:=TControleEstoque.Create(ConexaoDB);
    qry.Open;
    qry.First;
    while not qry.Eof do begin
      oControleEstoque.ProdutoId  :=qry.FieldByName('produtoId').AsInteger;
      oControleEstoque.Quantidade :=qry.FieldByName('quantidade').AsFloat;
      oControleEstoque.RetornarEstoque;
      qry.Next;
    end;
  finally
    if Assigned(oControleEstoque) then
      FreeAndNil(oControleEstoque);
  end;
end;

//Insert

procedure TVenda.BaixarEstoque(produtoId:Integer; Quantidade:Double);
var oControleEstoque:TControleEstoque;
begin
  try
    oControleEstoque:=TControleEstoque.Create(ConexaoDB);
    oControleEstoque.ProdutoId  :=produtoId;
    oControleEstoque.Quantidade :=Quantidade;
    oControleEstoque.BaixarEstoque;
  finally
    if Assigned(oControleEstoque) then
      FreeAndNil(oControleEstoque);
  end;
end;

{$endregion}

end.

